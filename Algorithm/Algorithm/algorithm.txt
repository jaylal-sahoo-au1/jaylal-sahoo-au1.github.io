Analysis of Big O Notation 

1. Sorting Algorithm
   1.bubble sort - O(n2)
   2.selection sort-O(n2)
   3.Insertion sort -O(n2)
   4.Quick sort -O(n2)
   5.Merge sort-O(n(log(n)))

2.Searching Algorithm
   1. Binary search -O(log(n))   
   2.Linear Search -O(n)

3.Data structure 
  1.Array/stack/queue -O(1)-Insert
                       O(1)-delete
                       O(n)-Search

  2.Linked list -   -O(1)-Insert
                     O(1)-delete
                     O(n)-Search   
  3.Hash table - O(n)-Insert
                 O(n)-delete
                 O(n)-Search  
  4.Binary search tree-  O(n)-Insert
                         O(n)-delete
                         O(n)-Search   




Examples of Big O Notation

1.O(1)-

function printFirstElementOfArray(arr)
{
console.log(arr[0]);
}

Explanation-This function runs in O(1) time (or "constant time") relative to its input. 
The input array could be 1 item or 1,000 items, but this function would still just require one step.


2.O(n)-

function printAllElementOfArray( arr, size)
{
    for (let i = 0; i < size; i++)
    {
        console.log(arr[i])
    }
}

Explanation -This function runs in O(n) time (or "linear time"), where n is the number of items in the array. 
If the array has 10 items, we have to print 10 times. If it has 1000 items, we have to print 1000 times.


3.O(n2)-

function printAllPossibleOrderedPairs(arr, size)
{
    for (let i = 0; i < size; i++)
    {
        for (let j = 0; j < size; j++)
        {
            console.log(arr[i][j])
        }
     }
}

Explanation-Here we're nesting two loops. If our array has n items, our outer loop runs n times and our inner loop 
runs n times for each iteration of the outer loop, giving us n2 total prints. Thus this function runs in O(n2) time 
(or "quadratic time"). If the array has 10 items, we have to print 100 times. If it has 1000 items, we have to print
 1000000 times.


 4.O(2n)-
 
 function fibonacci(num)
{
    if (num <= 1) return num;
    return fibonacci(num - 2) + fibonacci(num - 1);
}

Explanation-An example of an O(2n) function is the recursive calculation of Fibonacci numbers. O(2n) denotes an algorithm 
whose growth doubles with each addition to the input data set. The growth curve of an O(2n) function is exponential -
 starting off very shallow, then rising meteorically.

 

 few rules to find Big O Notation

 1.Drop the Constants

 function printAllItemsTwice(arr, size)
{
    for (let i = 0; i < size; i++)
    {
        console.log(arr[i])   // n steps
    }
	
    for (let i = 0; i < size; i++)
    {
        console.log(arr[i])   // n steps
    }
}
  total Will be O(2n)  ----which we just call O(n)


2.Drop the less significant term

function printAllNumbersThenAllPairSums(arr, size)
{
    for (let i = 0; i < size; i++)
    {
        console.log(arr[i])    // n steps
    }

    for (let i = 0; i < size; i++)
    {
        for (let j = 0; j < size; j++)
        {
            console.log(arr[i][j])     // n2 steps
        }
    }
}

Total - O(n+n2) ---Which we just call O(n2)



Reference articles-
1.https://developerinsider.co/big-o-notation-explained-with-examples/



